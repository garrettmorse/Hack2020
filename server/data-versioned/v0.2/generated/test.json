{"utterance": "create a function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci with one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a is greater than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when the string contains d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a is above c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "give me a function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a bigger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  invoking double passing x", "code": "set y to double x"}
{"utterance": "insert result at the end of the product list", "code": "append result to product list"}
{"utterance": "when a is bigger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "if a more than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "create a function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "let doubled equal the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "call triple on each thing from the array", "code": "map triple array"}
{"utterance": "if d is within the string then print string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each thing in the array", "code": "map triple array"}
{"utterance": "execute triple on each part inside the array", "code": "map triple array"}
{"utterance": "when a is larger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be equal to  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return fin read each line", "code": "return fin read all lines"}
{"utterance": "if a greater than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every element from the array", "code": "map double array"}
{"utterance": "if a is greater than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes one arg n", "code": "function fibonacci one argument s"}
