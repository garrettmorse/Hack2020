{"utterance": "define variable doubled be equal to  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function greet that takes a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively call f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is more than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "doubled be  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if not recursively execute f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log   total of a and b", "code": "call print a plus b"}
{"utterance": "define a function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string just show string", "code": "if d in string then call print string"}
{"utterance": "if a is bigger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string then log string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a greater than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a more than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "let there be a function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "let doubled equal  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "insert result at the start of the product list", "code": "prepend result to product list"}
{"utterance": "let there be a function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is more than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log  the sum of a and b", "code": "call print a plus b"}
{"utterance": "when d in the string then log string", "code": "if d in string then call print string"}
{"utterance": "if a is above c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "double each element from the array", "code": "map double array"}
{"utterance": "when a larger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "let there be a function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "define variable doubled be  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "create a function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively evaluate f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a bigger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled equal  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a larger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "make a function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a bigger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is greater than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when the string contains d just show string", "code": "if string contains d then call print string"}
{"utterance": "product discount be equal to the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "make a function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively evaluate f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "else return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "new function greet having one param name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  calling double with x", "code": "set y to double x"}
{"utterance": "let there be a function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a larger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string do show string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if the string contains d do print string", "code": "if string contains d then call print string"}
{"utterance": "when a bigger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of executing double with x", "code": "set y to double x"}
{"utterance": "when a is larger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each character in the string", "code": "for each char in string"}
{"utterance": "when a is larger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is larger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is larger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "evaluate print on every element in cities", "code": "for element in city call print city"}
{"utterance": "if a greater than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  calling double with x", "code": "set y to double x"}
{"utterance": "if a is greater than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount equal the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "define a function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is greater than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back  the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "make a function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is bigger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "add result to the end of the product list", "code": "append result to product list"}
{"utterance": "when a is bigger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of calling double passing x", "code": "set y to double x"}
{"utterance": "create a function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "call triple on every element in the array", "code": "map triple array"}
{"utterance": "when a greater than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string just log string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "double every part in the array", "code": "map double array"}
{"utterance": "doubled be equal to the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back the result of the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "returns input in n if n is an element of input else zero", "code": "return n input if n in input else zero"}
{"utterance": "if a larger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled be equal to the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled be equal to the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is above c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a greater than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "with open filename as fin", "code": "with open filename as fin"}
{"utterance": "when a greater than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal  calling double with x", "code": "set y to double x"}
{"utterance": "if a greater than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes a single param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "iterate over every character of the string", "code": "for each char in string"}
{"utterance": "when a greater than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "new function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "if a larger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let there be a function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if not just return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled equal  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one arg n", "code": "function fibonacci one argument s"}
{"utterance": "give me a function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is bigger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is larger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively call f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string do print string", "code": "if d in string then call print string"}
{"utterance": "new function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "reversed equal s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "if a is bigger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "let doubled equal  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of calling double with x", "code": "set y to double x"}
{"utterance": "if a is more than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  executing double using x", "code": "set y to double x"}
{"utterance": "new function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "make a function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "call triple on each element of the array", "code": "map triple array"}
{"utterance": "if a larger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of executing double using x", "code": "set y to double x"}
{"utterance": "return the result of  total of a and b", "code": "return a plus b"}
{"utterance": "if d inside of the string then show string", "code": "if d in string then call print string"}
{"utterance": "if a is above c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "create a function with name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is greater than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is greater than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "make a new variable y be equal to  executing double using x", "code": "set y to double x"}
{"utterance": "if a is above c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if not return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if not give back invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log  a and b together", "code": "call print a plus b"}
{"utterance": "tell me hello world", "code": "call print hello world"}
{"utterance": "when a is bigger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function hello world", "code": "function hello world zero arguments"}
{"utterance": "if a is more than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "else give back invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if the string contains d do display string", "code": "if string contains d then call print string"}
{"utterance": "create a function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let there be a function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "make a new variable doubled equal the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each element inside the array", "code": "map triple array"}
{"utterance": "when a more than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "if a more than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each element from the array", "code": "map triple array"}
{"utterance": "when the string includes d do display string", "code": "if string contains d then call print string"}
{"utterance": "when a is greater than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "give me a function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give back the result of a and b together", "code": "return a plus b"}
{"utterance": "when a is larger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print   total of a and b", "code": "call print a plus b"}
{"utterance": "if the string has inside it d then display string", "code": "if string contains d then call print string"}
{"utterance": "create a function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is above c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "take the average of variable one and variable too", "code": "mean variable one and variable two"}
{"utterance": "new function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "when true do give back false", "code": "if true then return false"}
{"utterance": "if a more than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let y be equal to  invoking double with x", "code": "set y to double x"}
{"utterance": "else return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a is greater than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a is greater than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every part of the array", "code": "map triple array"}
{"utterance": "if a more than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a more than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively execute f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is above c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a is larger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively execute f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is above c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string then print string", "code": "if d in string then call print string"}
{"utterance": "when a is bigger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a is above c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  calling double passing x", "code": "set y to double x"}
{"utterance": "store the result of executing f using x in y", "code": "set y to f x"}
{"utterance": "else just return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function hello", "code": "function hello zero args"}
{"utterance": "if a bigger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is bigger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  calling f using x in y", "code": "set y to f x"}
{"utterance": "when a is above c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d then display string", "code": "if string contains d then call print string"}
{"utterance": "give me a function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if d is in the string just show string", "code": "if d in string then call print string"}
{"utterance": "otherwise recursively invoke f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "define a function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return fin read all lines", "code": "return fin read all lines"}
{"utterance": "if a bigger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a more than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function fibonacci that takes a single param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that takes one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a is bigger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string just show string", "code": "if d in string then call print string"}
{"utterance": "give me a function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d then print string", "code": "if string contains d then call print string"}
{"utterance": "give me a function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "create a function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a larger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a greater than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a larger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when the string has inside it d do log string", "code": "if string contains d then call print string"}
{"utterance": "new function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of executing double with x", "code": "set y to double x"}
{"utterance": "else recursively invoke f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a more than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "make a new variable doubled be equal to  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of executing double with x", "code": "set y to double x"}
{"utterance": "if a is larger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string do log string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "define a function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise just return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "create a function fibonacci having a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "create a function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be equal to  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a larger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "if d is an element of the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "let doubled be  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "insert result at the back of the product list", "code": "append result to product list"}
{"utterance": "if a bigger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a is greater than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable y be the result of executing double passing x", "code": "set y to double x"}
{"utterance": "create a function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "make a function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log the result of the sum of a and b", "code": "call print a plus b"}
{"utterance": "if a is greater than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having one param name", "code": "function greet one argument name"}
{"utterance": "if a more than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if d in the string just display string", "code": "if d in string then call print string"}
{"utterance": "doubled equal  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "new function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string then print string", "code": "if d in string then call print string"}
{"utterance": "define variable doubled equal  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "make a function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that has just one param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is bigger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  invoking double with x", "code": "set y to double x"}
{"utterance": "when a more than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n smaller than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a greater than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return  the sum of a and b", "code": "return a plus b"}
{"utterance": "if a larger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "define variable product discount be equal to the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a greater than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return fibonacci of n minus one plus fibonacci of n minus two", "code": "return fibonacci n minus one plus fibonacci n minus two"}
{"utterance": "when a greater than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true just just return false", "code": "if true then return false"}
{"utterance": "if a is greater than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "when a more than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print the result of file length times file size", "code": "call print file length times file size"}
{"utterance": "if a more than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a bigger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled equal the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every character of the string", "code": "for each char in string"}
{"utterance": "if a is greater than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true then return false", "code": "if true then return false"}
{"utterance": "if a is above c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true just give back false", "code": "if true then return false"}
{"utterance": "when a is more than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of executing double passing x", "code": "set y to double x"}
{"utterance": "if a is larger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is more than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "make a function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "if d is in the string do show string", "code": "if d in string then call print string"}
{"utterance": "if a bigger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of executing double with x", "code": "set y to double x"}
{"utterance": "if a larger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let y be equal to the result of calling double passing x", "code": "set y to double x"}
{"utterance": "when a is larger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "show the result of a and b together", "code": "call print a plus b"}
{"utterance": "when a is above c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if d is an element of the string do show string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string do log string", "code": "if d in string then call print string"}
{"utterance": "create a function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "doubled be equal to  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me the result of  total of a and b", "code": "call print a plus b"}
{"utterance": "if a greater than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a greater than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively call f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each part inside the array", "code": "map triple array"}
{"utterance": "if a is more than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a more than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a more than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is bigger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string just print string", "code": "if d in string then call print string"}
{"utterance": "if a greater than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every line from all lines", "code": "for each line in all lines"}
{"utterance": "if a is bigger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of calling double using x", "code": "set y to double x"}
{"utterance": "when a greater than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d then show string", "code": "if string contains d then call print string"}
{"utterance": "define a function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of calling double passing x", "code": "set y to double x"}
{"utterance": "if a greater than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "evaluate triple on every part from the array", "code": "map triple array"}
{"utterance": "if d is within the string do log string", "code": "if d in string then call print string"}
{"utterance": "if a greater than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  calling double passing x", "code": "set y to double x"}
{"utterance": "if not give back call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to  executing double with x", "code": "set y to double x"}
{"utterance": "define variable doubled be  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string then show string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each part in the array", "code": "map triple array"}
{"utterance": "let there be a function hello world that", "code": "function hello world zero arguments"}
{"utterance": "if a is more than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  invoking double passing x", "code": "set y to double x"}
{"utterance": "if a greater than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if n less than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is bigger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string just show string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to  calling double using x", "code": "set y to double x"}
{"utterance": "if a larger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that has param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n smaller than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a bigger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "let there be a function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a larger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of invoking double using x", "code": "set y to double x"}
{"utterance": "otherwise", "code": "else"}
{"utterance": "make a function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me all lines", "code": "call print all lines"}
{"utterance": "when a larger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n in input otherwise zero", "code": "return n input if n in input else zero"}
{"utterance": "if n is less than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a more than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "call print on everything in cities", "code": "for element in city call print city"}
{"utterance": "if a is bigger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled be the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a is above c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one param n", "code": "function fibonacci one argument s"}
{"utterance": "define variable doubled be  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a larger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give back fin read all lines", "code": "return fin read all lines"}
{"utterance": "let there be a function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return the result of the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "when a larger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d do show string", "code": "if string contains d then call print string"}
{"utterance": "store the result of executing f passing x in y", "code": "set y to f x"}
{"utterance": "let there be a function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "make a new variable y be equal to  calling double using x", "code": "set y to double x"}
{"utterance": "when a more than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "doubled be equal to the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is greater than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal  executing double passing x", "code": "set y to double x"}
{"utterance": "make a new variable y be equal to the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "when a greater than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a more than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "doubled be the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with one param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each part in the array", "code": "map triple array"}
{"utterance": "when a is greater than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function fibonacci that takes in one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if the string includes d do log string", "code": "if string contains d then call print string"}
{"utterance": "when a is larger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute print on everything in cities", "code": "for element in city call print city"}
{"utterance": "if d is within the string just print string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is bigger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of calling double passing x", "code": "set y to double x"}
{"utterance": "if a more than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable y be equal to the result of invoking double with x", "code": "set y to double x"}
{"utterance": "define a function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  invoking double passing x", "code": "set y to double x"}
{"utterance": "call print on every element in cities", "code": "for element in city call print city"}
{"utterance": "when a larger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function hello world that", "code": "function hello world zero arguments"}
{"utterance": "when a is above c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "for every character in the string", "code": "for each char in string"}
{"utterance": "when a greater than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every line from all lines", "code": "for each line in all lines"}
{"utterance": "if a is above c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "otherwise return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for character of the string", "code": "for each char in string"}
{"utterance": "if a bigger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each part of the array", "code": "map double array"}
{"utterance": "if a is greater than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is more than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be equal to the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to  executing double using x", "code": "set y to double x"}
{"utterance": "if a larger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "define a function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "if not recursively execute f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "make a new variable doubled equal the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "y be equal to  executing double with x", "code": "set y to double x"}
{"utterance": "when a is above c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  invoking double passing x", "code": "set y to double x"}
{"utterance": "give me a function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "new function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "create a function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "y be  invoking double using x", "code": "set y to double x"}
{"utterance": "if a larger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "otherwise just return invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is more than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "let there be a function having name", "code": "function [FUNC] one argument name"}
{"utterance": "if a more than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d do print string", "code": "if string contains d then call print string"}
{"utterance": "when a is above c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show  a and b together", "code": "call print a plus b"}
{"utterance": "make a new variable reversed equal s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "if a is greater than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "if not recursively invoke f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is more than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "give me a function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a larger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is more than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let reversed be s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "let there be a function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a bigger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount be equal to the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a larger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes a single arg name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  executing double passing x", "code": "set y to double x"}
{"utterance": "if a is bigger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of calling double passing x", "code": "set y to double x"}
{"utterance": "if a is more than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "new function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "define a function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "evaluate print on each element in cities", "code": "for element in city call print city"}
{"utterance": "when a bigger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for line of all lines", "code": "for each line in all lines"}
{"utterance": "when a is more than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string just print string", "code": "if d in string then call print string"}
{"utterance": "new function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each thing inside the array", "code": "map double array"}
{"utterance": "if a greater than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled equal  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is larger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of calling double with x", "code": "set y to double x"}
{"utterance": "let there be a function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  invoking double using x", "code": "set y to double x"}
{"utterance": "make a function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise just return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a larger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively evaluate f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "create a function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a larger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  calling double with x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if d inside of the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "when a bigger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "make a function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "y equal the result of invoking double using x", "code": "set y to double x"}
{"utterance": "if not just return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string just print string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return  a and b together", "code": "return a plus b"}
{"utterance": "when a bigger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function hello", "code": "function hello zero args"}
{"utterance": "when a greater than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively invoke f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "define a function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when d is in the string just display string", "code": "if d in string then call print string"}
{"utterance": "if the string contains d do show string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "add result at the back of the product list", "code": "append result to product list"}
{"utterance": "let there be a function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is above c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "new function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "when a larger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "create a function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true just return false", "code": "if true then return false"}
{"utterance": "when a greater than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount be the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when d is in the string then log string", "code": "if d in string then call print string"}
{"utterance": "else give back invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a is larger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "find the mean of variable one and variable too", "code": "mean variable one and variable two"}
{"utterance": "log file dot read", "code": "call print file dot read"}
{"utterance": "if a is more than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when n is less than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "doubled be  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to  invoking double passing x", "code": "set y to double x"}
{"utterance": "when a bigger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "double each element of the array", "code": "map double array"}
{"utterance": "if a greater than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "give me a function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if not recursively evaluate f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is larger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "append result to the product list", "code": "append result to product list"}
{"utterance": "define a function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "take the mean of variable one and variable too", "code": "mean variable one and variable two"}
{"utterance": "make a new variable y be the result of executing double passing x", "code": "set y to double x"}
{"utterance": "otherwise just return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a larger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "else recursively call f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "create a function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is more than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "else just return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a greater than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every char from the string", "code": "for each char in string"}
{"utterance": "create a function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show   total of a and b", "code": "call print a plus b"}
{"utterance": "if a is above c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "doubled equal the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each element in the array", "code": "map triple array"}
{"utterance": "if a bigger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every part inside the array", "code": "map triple array"}
{"utterance": "when a is above c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "give me a function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "when a is more than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each line in all lines", "code": "for each line in all lines"}
{"utterance": "when a is greater than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a larger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "doubled be equal to  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let there be a function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is above c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "if a more than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print  the sum of a and b", "code": "call print a plus b"}
{"utterance": "when a is bigger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "make a function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "when true then give back false", "code": "if true then return false"}
{"utterance": "if a is more than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of executing double with x", "code": "set y to double x"}
{"utterance": "define variable y be equal to  calling double passing x", "code": "set y to double x"}
{"utterance": "if a more than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "new function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a larger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise give back evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "execute triple on every thing of the array", "code": "map triple array"}
{"utterance": "when a is above c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is larger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "let y be equal to the result of calling double using x", "code": "set y to double x"}
{"utterance": "define a function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "if a more than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "otherwise give back invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every element of the array", "code": "map triple array"}
{"utterance": "create a function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "new function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively evaluate f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "else just return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d then print string", "code": "if string contains d then call print string"}
{"utterance": "make a new variable doubled be  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "define variable y equal the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "when a larger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "define a function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is more than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let reversed be equal to s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "if a is larger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "return the result of a and b together", "code": "return a plus b"}
{"utterance": "if a greater than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every thing in the array", "code": "map triple array"}
{"utterance": "if true do just return false", "code": "if true then return false"}
{"utterance": "let doubled equal the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when n is less than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a bigger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each thing in the array", "code": "map triple array"}
{"utterance": "make a new variable doubled be equal to  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every thing in the array", "code": "map triple array"}
{"utterance": "doubled be the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each element in the array", "code": "map triple array"}
{"utterance": "when a bigger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if d in the string then show string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "if d is in the string then print string", "code": "if d in string then call print string"}
{"utterance": "define a function having name", "code": "function [FUNC] one argument name"}
{"utterance": "if a bigger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a larger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a bigger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled be equal to  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back the result of the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "when a greater than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "call print on every part in cities", "code": "for element in city call print city"}
{"utterance": "make a new variable y be the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "make a new variable doubled equal  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount be equal to my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is more than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one param n", "code": "function fibonacci one argument s"}
{"utterance": "let there be a function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a bigger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define variable y be equal to the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is greater than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "when a more than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount equal the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a more than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "when a is above c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a larger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount be the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "create a function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "let there be a function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "create a function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  executing double passing x", "code": "set y to double x"}
{"utterance": "if a is larger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "find the average of variable one and variable too", "code": "mean variable one and variable two"}
{"utterance": "when a larger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci that has a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every part inside the array", "code": "map double array"}
{"utterance": "when a is more than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "double every thing of the array", "code": "map double array"}
{"utterance": "if a is larger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each part from the array", "code": "map triple array"}
{"utterance": "when a is above c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "new function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "append result to the end of the product list", "code": "append result to product list"}
{"utterance": "when a greater than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string do show string", "code": "if d in string then call print string"}
{"utterance": "make a new variable y be equal to  calling double passing x", "code": "set y to double x"}
{"utterance": "when a is more than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string do display string", "code": "if d in string then call print string"}
{"utterance": "if a more than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be equal to  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string just log string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is more than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if not return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when d is in the string then print string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let product discount be equal to the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is bigger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back fibonacci of n minus one plus fibonacci of n minus two", "code": "return fibonacci n minus one plus fibonacci n minus two"}
{"utterance": "new function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "if n smaller than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a larger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled be the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "new function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function hello world that", "code": "function hello world zero arguments"}
{"utterance": "when a is bigger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is above c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string do display string", "code": "if d in string then call print string"}
{"utterance": "define variable doubled equal  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display the result of file length times file size", "code": "call print file length times file size"}
{"utterance": "when a bigger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "define a function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each thing inside the array", "code": "map triple array"}
{"utterance": "make a function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if d in the string just log string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is above c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on everything in cities", "code": "for element in city call print city"}
{"utterance": "when a is greater than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "if a larger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having one param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of invoking double with x", "code": "set y to double x"}
{"utterance": "when a larger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a is above c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string do log string", "code": "if d in string then call print string"}
{"utterance": "make a function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a greater than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if the string has inside it d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "make a new variable doubled be  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is larger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let y be equal to  calling double with x", "code": "set y to double x"}
{"utterance": "just return the result of my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "make a new variable y equal  executing double with x", "code": "set y to double x"}
{"utterance": "when a is more than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on every thing in cities", "code": "for element in city call print city"}
{"utterance": "give me a function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "define a function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a bigger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d just show string", "code": "if string contains d then call print string"}
{"utterance": "define a function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "when the string has inside it d then log string", "code": "if string contains d then call print string"}
{"utterance": "if a larger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each char of the string", "code": "for each char in string"}
{"utterance": "when n is less than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is more than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "make a function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every element in the array", "code": "map triple array"}
{"utterance": "make a function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a more than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  calling double using x", "code": "set y to double x"}
{"utterance": "for every line of all lines", "code": "for each line in all lines"}
{"utterance": "if a is larger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string just display string", "code": "if d in string then call print string"}
{"utterance": "make a function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable doubled equal  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a is greater than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "give me a function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when the string has inside it d do display string", "code": "if string contains d then call print string"}
{"utterance": "if a larger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for character in the string", "code": "for each char in string"}
{"utterance": "when a bigger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true just give back false", "code": "if true then return false"}
{"utterance": "when a is bigger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every character inside the string", "code": "for each char in string"}
{"utterance": "when a is above c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "call triple on each part of the array", "code": "map triple array"}
{"utterance": "if a bigger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d just display string", "code": "if string contains d then call print string"}
{"utterance": "if a is greater than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "return fin read each line", "code": "return fin read all lines"}
{"utterance": "if a is bigger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "insert result to the product list", "code": "append result to product list"}
{"utterance": "if a more than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d just display string", "code": "if string contains d then call print string"}
{"utterance": "when d is within the string just show string", "code": "if d in string then call print string"}
{"utterance": "let doubled be  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "show  file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "new function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "when a is above c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string then show string", "code": "if d in string then call print string"}
{"utterance": "if a bigger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of executing double with x", "code": "set y to double x"}
{"utterance": "when a is above c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "define variable y equal  calling double using x", "code": "set y to double x"}
{"utterance": "if a is greater than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of calling double using x", "code": "set y to double x"}
{"utterance": "if a is greater than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "new function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each line of all lines", "code": "for each line in all lines"}
{"utterance": "create a function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is more than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "if a more than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "new function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "else just return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a larger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "make a new variable doubled equal  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a is more than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every thing from the array", "code": "map triple array"}
{"utterance": "let doubled be equal to  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string just log string", "code": "if d in string then call print string"}
{"utterance": "when a larger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "define a function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "new function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a more than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is above c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every thing from the array", "code": "map double array"}
{"utterance": "if a greater than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of calling double passing x", "code": "set y to double x"}
{"utterance": "make a function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log hello space name", "code": "call print hello space name"}
{"utterance": "give me a function having name", "code": "function [FUNC] one argument name"}
{"utterance": "new function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is more than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "define a function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled equal the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled be the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "evaluate triple on every element in the array", "code": "map triple array"}
{"utterance": "if a is more than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate print on each thing in cities", "code": "for element in city call print city"}
{"utterance": "when a more than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is bigger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a is bigger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "new function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when d is in the string just show string", "code": "if d in string then call print string"}
{"utterance": "if a more than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of calling double using x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  invoking double using x", "code": "set y to double x"}
{"utterance": "when a greater than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a more than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "evaluate print on every thing in cities", "code": "for element in city call print city"}
{"utterance": "when a is more than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when n is smaller than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "call triple on every part from the array", "code": "map triple array"}
{"utterance": "new function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a is larger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "execute triple on each thing in the array", "code": "map triple array"}
{"utterance": "when a more than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "for every line in all lines", "code": "for each line in all lines"}
{"utterance": "let there be a function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let y be the result of invoking double with x", "code": "set y to double x"}
{"utterance": "if a greater than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print  file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "let there be a function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "make a function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if not give back call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if not just return invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable y equal the result of calling double using x", "code": "set y to double x"}
{"utterance": "let there be a function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively evaluate f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is larger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a is bigger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return  the sum of a and b", "code": "return a plus b"}
{"utterance": "when a more than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to  invoking double using x", "code": "set y to double x"}
{"utterance": "when a is greater than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function hello", "code": "function hello zero args"}
{"utterance": "when the string includes d just log string", "code": "if string contains d then call print string"}
{"utterance": "else just return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively execute f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is larger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of executing double with x", "code": "set y to double x"}
{"utterance": "else just return execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "with open filename as file", "code": "with open filename as file"}
{"utterance": "when the string includes d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is larger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back n", "code": "return n"}
{"utterance": "when a is greater than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is above c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me the result of the sum of a and b", "code": "call print a plus b"}
{"utterance": "make a function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "let there be a function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every character from the string", "code": "for each char in string"}
{"utterance": "doubled be equal to  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "put result at the start of the product list", "code": "prepend result to product list"}
{"utterance": "when a is above c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount equal my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "create a function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "otherwise just return evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is above c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d just show string", "code": "if string contains d then call print string"}
{"utterance": "if a is bigger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is more than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d just print string", "code": "if string contains d then call print string"}
{"utterance": "new function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "when a more than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "let y be  executing double using x", "code": "set y to double x"}
{"utterance": "let there be a function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is above c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a bigger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each element of the array", "code": "map triple array"}
{"utterance": "when a is greater than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back  a plus b", "code": "return a plus b"}
{"utterance": "if a is more than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "when a more than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "add result to the product list", "code": "append result to product list"}
{"utterance": "when a is larger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "otherwise just return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "display hello space name", "code": "call print hello space name"}
{"utterance": "when a is more than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable y equal  calling double passing x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that has param string filename", "code": "function read from file one argument filename"}
{"utterance": "execute triple on each part from the array", "code": "map triple array"}
{"utterance": "if a is above c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "otherwise recursively invoke f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is larger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "create a function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string just log string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a is larger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display  a and b together", "code": "call print a plus b"}
{"utterance": "if n smaller than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "for each char in the string", "code": "for each char in string"}
{"utterance": "make a function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "when a is above c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "let there be a function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "new function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "iterate over every char inside the string", "code": "for each char in string"}
{"utterance": "new function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "doubled be the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled equal  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "let there be a function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "doubled be equal to the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is less than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show the result of file length times file size", "code": "call print file length times file size"}
{"utterance": "when a is above c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d then log string", "code": "if string contains d then call print string"}
{"utterance": "if a is more than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every part of the array", "code": "map triple array"}
{"utterance": "if a bigger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "give me a function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let doubled be equal to the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "show hello world", "code": "call print hello world"}
{"utterance": "new function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each thing inside the array", "code": "map triple array"}
{"utterance": "if a more than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with one param name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when d is in the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "when a more than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a is above c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every char from the string", "code": "for each char in string"}
{"utterance": "if a larger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "otherwise recursively evaluate f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is above c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every char of the string", "code": "for each char in string"}
{"utterance": "return  a and b together", "code": "return a plus b"}
{"utterance": "when a greater than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of calling double passing x", "code": "set y to double x"}
{"utterance": "when a more than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a larger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d just log string", "code": "if string contains d then call print string"}
{"utterance": "if a is larger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every line in all lines", "code": "for each line in all lines"}
{"utterance": "new function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define a function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a larger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if not just return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string just display string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every element in the array", "code": "map triple array"}
{"utterance": "when a is greater than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n is in input else zero", "code": "return n input if n in input else zero"}
{"utterance": "if a is more than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let doubled equal  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "tell me  the sum of a and b", "code": "call print a plus b"}
{"utterance": "call triple on every element of the array", "code": "map triple array"}
{"utterance": "when d is within the string do display string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every thing inside the array", "code": "map triple array"}
{"utterance": "when a bigger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "otherwise recursively evaluate f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "if a is above c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "if a is more than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if d inside of the string then display string", "code": "if d in string then call print string"}
{"utterance": "if a is larger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if not recursively evaluate f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is more than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display   total of a and b", "code": "call print a plus b"}
{"utterance": "when a is larger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "invoke triple on each part of the array", "code": "map triple array"}
{"utterance": "when a more than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else", "code": "else"}
{"utterance": "if a larger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "make a function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a is bigger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "double every part of the array", "code": "map double array"}
{"utterance": "if a is greater than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "new function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a larger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string then display string", "code": "if d in string then call print string"}
{"utterance": "when a more than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every char inside the string", "code": "for each char in string"}
{"utterance": "when a is greater than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on every element from the array", "code": "map triple array"}
{"utterance": "y be equal to  executing double using x", "code": "set y to double x"}
{"utterance": "when a bigger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every part of the array", "code": "map triple array"}
{"utterance": "if a more than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of calling double using x", "code": "set y to double x"}
{"utterance": "new function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount be my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a more than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "doubled be equal to the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function hello world that", "code": "function hello world zero arguments"}
{"utterance": "when a is bigger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to the result of invoking double using x", "code": "set y to double x"}
{"utterance": "define a function greet that takes in just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a is more than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable doubled equal  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each element from the array", "code": "map triple array"}
{"utterance": "when a larger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "let there be a function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n is within input otherwise zero", "code": "return n input if n in input else zero"}
{"utterance": "let doubled be  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "new function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "let doubled equal  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "just return fin read every line", "code": "return fin read all lines"}
{"utterance": "store  invoking f using x in y", "code": "set y to f x"}
{"utterance": "if a is more than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to  calling double passing x", "code": "set y to double x"}
{"utterance": "create a function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is larger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print the result of  total of a and b", "code": "call print a plus b"}
{"utterance": "when a is above c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "define a function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let dictionary sam to twenty two", "code": "dictionary sam equal twenty-two"}
{"utterance": "let there be a function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "invoke triple on every part inside the array", "code": "map triple array"}
{"utterance": "make a function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "let there be a function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "when n is below 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function hello", "code": "function hello zero args"}
{"utterance": "define variable doubled be equal to the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "let doubled be equal to the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  invoking double using x", "code": "set y to double x"}
{"utterance": "else just return evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return the result of the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "when a more than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "put result at the front of the product list", "code": "prepend result to product list"}
{"utterance": "give me a function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return  a plus b", "code": "return a plus b"}
{"utterance": "give me a function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is more than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if not recursively call f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is more than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d then log string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is above c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give back fin read every line", "code": "return fin read all lines"}
{"utterance": "let doubled be the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "for line from all lines", "code": "for each line in all lines"}
{"utterance": "when n smaller than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is greater than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled equal  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "otherwise return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store the result of executing f with x in y", "code": "set y to f x"}
{"utterance": "just return n", "code": "return n"}
{"utterance": "when a bigger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal the result of invoking double using x", "code": "set y to double x"}
{"utterance": "define variable y equal  executing double using x", "code": "set y to double x"}
{"utterance": "if a is bigger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is bigger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "give back  the sum of a and b", "code": "return a plus b"}
{"utterance": "if a greater than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of invoking double using x", "code": "set y to double x"}
{"utterance": "when a is above c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable y be  calling double using x", "code": "set y to double x"}
{"utterance": "if a is above c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string just print string", "code": "if d in string then call print string"}
{"utterance": "else give back evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define a function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "double every thing inside the array", "code": "map double array"}
{"utterance": "if a is bigger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display  file length times file size", "code": "call print file length times file size"}
{"utterance": "if a is above c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "if not return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a larger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "when a more than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display the result of  total of a and b", "code": "call print a plus b"}
{"utterance": "when a is above c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d just log string", "code": "if string contains d then call print string"}
{"utterance": "if a is larger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string do print string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every line inside all lines", "code": "for each line in all lines"}
{"utterance": "when a is more than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every element inside the array", "code": "map triple array"}
{"utterance": "let doubled equal the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return hi plus name", "code": "return hi plus name"}
{"utterance": "if a is more than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a greater than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  executing f with x in y", "code": "set y to f x"}
{"utterance": "when a greater than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  executing double passing x", "code": "set y to double x"}
{"utterance": "when a is larger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show  the sum of a and b", "code": "call print a plus b"}
{"utterance": "when a bigger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be the result of invoking double with x", "code": "set y to double x"}
{"utterance": "make a new variable doubled equal the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show  a plus b", "code": "call print a plus b"}
{"utterance": "give me a function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "when a is above c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each element inside the array", "code": "map triple array"}
{"utterance": "if a is greater than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log the result of  total of a and b", "code": "call print a plus b"}
{"utterance": "when a is larger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string then log string", "code": "if d in string then call print string"}
{"utterance": "new function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d just show string", "code": "if string contains d then call print string"}
{"utterance": "else return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "define a function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "make a function fibonacci that takes a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if true do give back false", "code": "if true then return false"}
{"utterance": "if a is above c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount be the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "create a function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "print the result of a and b together", "code": "call print a plus b"}
{"utterance": "if a is bigger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string then print string", "code": "if d in string then call print string"}
{"utterance": "if a greater than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount equal the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a is larger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "when a is more than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string then display string", "code": "if d in string then call print string"}
{"utterance": "if a greater than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be equal to the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return the result of a and b together", "code": "return a plus b"}
{"utterance": "if a larger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively invoke f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "just return the result of the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "if a is larger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is greater than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "if a more than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back the result of  total of a and b", "code": "return a plus b"}
{"utterance": "if a is larger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "otherwise just return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let reversed equal s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "if a is bigger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  executing double passing x", "code": "set y to double x"}
{"utterance": "if a greater than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if d is within the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "define variable doubled equal the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each element from the array", "code": "map triple array"}
{"utterance": "when a more than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively invoke f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when n is below 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is greater than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "if the string contains d just display string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "create a function with two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is bigger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "y be the result of calling double passing x", "code": "set y to double x"}
{"utterance": "if not recursively evaluate f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is greater than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is bigger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a greater than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "y be equal to  calling double using x", "code": "set y to double x"}
{"utterance": "when a is more than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string just show string", "code": "if d in string then call print string"}
{"utterance": "if a more than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back fin read each line", "code": "return fin read all lines"}
{"utterance": "otherwise return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "new function fibonacci that takes a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when d inside of the string do display string", "code": "if d in string then call print string"}
{"utterance": "if a bigger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "call triple on every thing from the array", "code": "map triple array"}
{"utterance": "let doubled equal  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every element inside the array", "code": "map triple array"}
{"utterance": "y equal  calling double passing x", "code": "set y to double x"}
{"utterance": "else return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "else recursively invoke f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "new function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "else give back evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a greater than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "let y equal  calling double passing x", "code": "set y to double x"}
{"utterance": "when a larger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "evaluate triple on every part in the array", "code": "map triple array"}
{"utterance": "when a is more than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of calling double using x", "code": "set y to double x"}
{"utterance": "let doubled be equal to  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a greater than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "make a function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "if a is above c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function hello world", "code": "function hello world zero arguments"}
{"utterance": "else just return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "new function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "define variable doubled be equal to the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "create a function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when d is within the string then log string", "code": "if d in string then call print string"}
{"utterance": "make a function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a is bigger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "let there be a function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if the string contains d just show string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively execute f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is above c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "create a function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let product discount equal the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is greater than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string just print string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of executing double passing x", "code": "set y to double x"}
{"utterance": "if a is more than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "define a function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a bigger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every element of the array", "code": "map double array"}
{"utterance": "if a greater than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n in input if not zero", "code": "return n input if n in input else zero"}
{"utterance": "if a bigger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "else recursively invoke f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "returns input in n if n inside of input else zero", "code": "return n input if n in input else zero"}
{"utterance": "when a more than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when a bigger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "for each character of the string", "code": "for each char in string"}
{"utterance": "doubled be equal to  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "let y equal  executing double using x", "code": "set y to double x"}
{"utterance": "when a greater than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each line from all lines", "code": "for each line in all lines"}
{"utterance": "execute print on every part in cities", "code": "for element in city call print city"}
{"utterance": "when a is larger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show the result of a plus b", "code": "call print a plus b"}
{"utterance": "give me a function fibonacci having one arg n", "code": "function fibonacci one argument s"}
{"utterance": "if a greater than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let product discount be the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a more than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "add result at the end of the product list", "code": "append result to product list"}
{"utterance": "when a larger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function with two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a larger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "prepend result at the front of the product list", "code": "prepend result to product list"}
{"utterance": "if a is more than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is greater than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively call f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is more than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of executing double passing x", "code": "set y to double x"}
{"utterance": "if a is greater than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is above c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function hello world", "code": "function hello world zero arguments"}
{"utterance": "if not just return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when n is smaller than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is above c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log the result of a plus b", "code": "call print a plus b"}
{"utterance": "if a more than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is below 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a greater than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "make a new variable y equal  calling double passing x", "code": "set y to double x"}
{"utterance": "new function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal the result of executing double with x", "code": "set y to double x"}
{"utterance": "if a is greater than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal  invoking double with x", "code": "set y to double x"}
{"utterance": "when a more than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if the string includes d just display string", "code": "if string contains d then call print string"}
{"utterance": "when a is greater than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  invoking double using x", "code": "set y to double x"}
{"utterance": "when a larger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if the string has inside it d then show string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function having two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true just return false", "code": "if true then return false"}
{"utterance": "new function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string then print string", "code": "if d in string then call print string"}
{"utterance": "when a is above c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  executing double with x", "code": "set y to double x"}
{"utterance": "when a greater than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each thing of the array", "code": "map triple array"}
{"utterance": "when a larger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise give back call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having one arg n", "code": "function fibonacci one argument s"}
{"utterance": "make a function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci that has just one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for char of the string", "code": "for each char in string"}
{"utterance": "if a bigger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "doubled be  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if not just return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "define a function greet with one param name", "code": "function greet one argument name"}
{"utterance": "define a function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled be the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every element from the array", "code": "map triple array"}
{"utterance": "if a is above c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "new function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when n smaller than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "if a bigger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "create a function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if n is below 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not", "code": "else"}
{"utterance": "if a is above c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is more than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  calling double using x", "code": "set y to double x"}
{"utterance": "doubled be equal to  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is larger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "create a function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is larger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "let there be a function having two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string do log string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a is larger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  calling double with x", "code": "set y to double x"}
{"utterance": "when a is larger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log  file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "when a is greater than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me the result of a plus b", "code": "call print a plus b"}
{"utterance": "create a function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a bigger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function fibonacci that takes in one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a greater than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable y be equal to  invoking double using x", "code": "set y to double x"}
{"utterance": "give me a function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string then display string", "code": "if d in string then call print string"}
{"utterance": "when the string has inside it d do print string", "code": "if string contains d then call print string"}
{"utterance": "let there be a function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "new function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store the result of calling f passing x in y", "code": "set y to f x"}
{"utterance": "if a is bigger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string then log string", "code": "if d in string then call print string"}
{"utterance": "when d inside of the string just display string", "code": "if d in string then call print string"}
{"utterance": "when n smaller than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a more than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "doubled equal  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "new function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "create a function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if the string has inside it d just display string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "make a function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a is greater than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is greater than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when n is less than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if the string has inside it d do display string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return  my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "create a function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "let doubled equal the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a larger than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount be equal to my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a is above c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is less than or equal to two", "code": "if n less than or equal two"}
{"utterance": "define a function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a greater than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each element in the array", "code": "map triple array"}
{"utterance": "define a function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define a function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "store  invoking f with x in y", "code": "set y to f x"}
{"utterance": "let there be a function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "else recursively invoke f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "give me a function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise just return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "new function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a more than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable y be equal to  executing double passing x", "code": "set y to double x"}
{"utterance": "if a is above c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each thing from the array", "code": "map triple array"}
{"utterance": "when a is larger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every line of all lines", "code": "for each line in all lines"}
{"utterance": "let there be a function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a greater than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "create a function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d do log string", "code": "if string contains d then call print string"}
{"utterance": "if a larger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is above c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "doubled equal the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if not give back evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "make a function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a greater than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "for char inside the string", "code": "for each char in string"}
{"utterance": "when d is within the string just display string", "code": "if d in string then call print string"}
{"utterance": "make a new variable doubled be equal to  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every part from the array", "code": "map double array"}
{"utterance": "when a more than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is above c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "return  the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "when a is more than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "y be the result of executing double passing x", "code": "set y to double x"}
{"utterance": "let there be a function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is bigger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to  invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is more than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is greater than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when the string includes d do log string", "code": "if string contains d then call print string"}
{"utterance": "doubled equal  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d just print string", "code": "if string contains d then call print string"}
{"utterance": "define variable doubled be equal to the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a is larger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "if a is above c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is above c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when d is within the string then display string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print the result of a plus b", "code": "call print a plus b"}
{"utterance": "when a is above c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "make a new variable product discount be the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a larger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute print on each part in cities", "code": "for element in city call print city"}
{"utterance": "create a function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "when a is above c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a greater than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is bigger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "let doubled equal  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "new function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal the result of executing double using x", "code": "set y to double x"}
{"utterance": "new function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every thing of the array", "code": "map triple array"}
{"utterance": "when a is greater than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal  invoking double with x", "code": "set y to double x"}
{"utterance": "execute triple on every part in the array", "code": "map triple array"}
{"utterance": "new function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string do show string", "code": "if d in string then call print string"}
{"utterance": "if a is larger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when d inside of the string then display string", "code": "if d in string then call print string"}
{"utterance": "define a function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return the result of the sum of a and b", "code": "return a plus b"}
{"utterance": "if a bigger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call print on each part in cities", "code": "for element in city call print city"}
{"utterance": "when a is more than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable y equal the result of calling double passing x", "code": "set y to double x"}
{"utterance": "tell me  file length times file size", "code": "call print file length times file size"}
{"utterance": "let doubled be  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is larger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "execute print on every element in cities", "code": "for element in city call print city"}
{"utterance": "if a is larger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true then just return false", "code": "if true then return false"}
{"utterance": "if a is above c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "new function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is greater than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a bigger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string do log string", "code": "if d in string then call print string"}
{"utterance": "when a bigger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store the result of invoking f using x in y", "code": "set y to f x"}
{"utterance": "if a greater than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every thing in the array", "code": "map triple array"}
{"utterance": "make a new variable product discount equal my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when the string contains d then log string", "code": "if string contains d then call print string"}
{"utterance": "when a is more than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call print on each element in cities", "code": "for element in city call print city"}
{"utterance": "define variable doubled be equal to  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "give me a function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be the result of executing double using x", "code": "set y to double x"}
{"utterance": "if the string has inside it d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is bigger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "new function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "print hello world", "code": "call print hello world"}
{"utterance": "if a greater than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is larger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log the result of file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "when a bigger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string then log string", "code": "if d in string then call print string"}
{"utterance": "if a more than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable y be  invoking double with x", "code": "set y to double x"}
{"utterance": "when a is greater than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes argument string filename", "code": "function read from file one argument filename"}
{"utterance": "create a function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if n is less than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is bigger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on every thing of the array", "code": "map triple array"}
{"utterance": "else return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back the result of the sum of a and b", "code": "return a plus b"}
{"utterance": "when a is larger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a new variable reversed be s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "when a more than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "create a function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "when a is above c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string just display string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "if a is above c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is below 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a is greater than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "new function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "doubled be equal to  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "y be equal to the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is greater than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a more than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "let product discount equal my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a bigger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "make a function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of invoking double using x", "code": "set y to double x"}
{"utterance": "when a more than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "if not just return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is larger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true then return false", "code": "if true then return false"}
{"utterance": "when a is larger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a is above c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively execute f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is larger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "new function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "let y be the result of calling double with x", "code": "set y to double x"}
{"utterance": "if a greater than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is more than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is more than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a larger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "print  a plus b", "code": "call print a plus b"}
{"utterance": "define a function that takes in two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when n is less than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "else give back evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "doubled equal  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a greater than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string do show string", "code": "if d in string then call print string"}
{"utterance": "if a bigger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  executing double using x", "code": "set y to double x"}
{"utterance": "if a is bigger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a bigger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled be equal to  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a greater than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let doubled be equal to  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if not just return execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is more than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is more than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a bigger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to  calling double with x", "code": "set y to double x"}
{"utterance": "when a bigger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every part in the array", "code": "map triple array"}
{"utterance": "if a more than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "iterate over every character in the string", "code": "for each char in string"}
{"utterance": "when a bigger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if not recursively invoke f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of calling double with x", "code": "set y to double x"}
{"utterance": "make a function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if the string includes d do display string", "code": "if string contains d then call print string"}
{"utterance": "if a is more than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of calling double with x", "code": "set y to double x"}
{"utterance": "if a is above c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "define variable y equal  executing double passing x", "code": "set y to double x"}
{"utterance": "returns input in n if n is in input if not zero", "code": "return n input if n in input else zero"}
{"utterance": "if a is larger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return fin read all lines", "code": "return fin read all lines"}
{"utterance": "when a is greater than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function hello", "code": "function hello zero args"}
{"utterance": "if a more than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "define a function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "if a larger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "append result at the back of the product list", "code": "append result to product list"}
{"utterance": "if a is bigger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every part from the array", "code": "map triple array"}
{"utterance": "let doubled be the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "log  file length times file size", "code": "call print file length times file size"}
{"utterance": "when a is greater than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string do display string", "code": "if d in string then call print string"}
{"utterance": "when a is above c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of invoking double using x", "code": "set y to double x"}
{"utterance": "when a is greater than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "call print on each thing in cities", "code": "for element in city call print city"}
{"utterance": "when a is more than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "define a function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is bigger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let product discount be my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "let doubled equal the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a larger than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is greater than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "define variable doubled be equal to  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when the string has inside it d then print string", "code": "if string contains d then call print string"}
{"utterance": "define a function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is bigger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "let doubled be equal to the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let y be equal to  invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is above c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "prints hello world", "code": "call print hello world"}
{"utterance": "define variable doubled be  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is bigger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let there be a function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "create a function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a bigger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a larger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount be my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is greater than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on each element in cities", "code": "for element in city call print city"}
{"utterance": "when a larger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true then just return false", "code": "if true then return false"}
{"utterance": "when a is above c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "log  a plus b", "code": "call print a plus b"}
{"utterance": "when a larger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return   total of a and b", "code": "return a plus b"}
{"utterance": "if a larger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a more than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each thing inside the array", "code": "map triple array"}
{"utterance": "make a function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "define a function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each element inside the array", "code": "map double array"}
{"utterance": "when a is greater than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  calling double using x", "code": "set y to double x"}
{"utterance": "if a is more than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function hello world", "code": "function hello world zero arguments"}
{"utterance": "if a more than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n smaller than or equal to too", "code": "if n less than or equal two"}
{"utterance": "if a is greater than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "else give back execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string do show string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal the result of calling double with x", "code": "set y to double x"}
{"utterance": "if a is above c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively evaluate f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is greater than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has one arg n", "code": "function fibonacci one argument s"}
{"utterance": "new function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let y be equal to the result of invoking double with x", "code": "set y to double x"}
{"utterance": "otherwise return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "define a function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return fibonacci of n minus one plus fibonacci of n minus two", "code": "return fibonacci n minus one plus fibonacci n minus two"}
{"utterance": "if a bigger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  executing double using x", "code": "set y to double x"}
{"utterance": "give me a function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a is more than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display  file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "if a is larger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "when a more than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "define a function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is greater than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "y be equal to  invoking double with x", "code": "set y to double x"}
{"utterance": "if a bigger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a is more than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome with one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when n is below 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is above c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "give me a function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is below or equal to two", "code": "if n less than or equal two"}
{"utterance": "if a is greater than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "otherwise return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if not give back execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each thing of the array", "code": "map triple array"}
{"utterance": "if a is above c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me  a and b together", "code": "call print a plus b"}
{"utterance": "if a larger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display the result of file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "if not just return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "give me a function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci that takes one param n", "code": "function fibonacci one argument n"}
{"utterance": "new function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "doubled equal  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d do log string", "code": "if string contains d then call print string"}
{"utterance": "if d is an element of the string then show string", "code": "if d in string then call print string"}
{"utterance": "when a bigger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is more than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let doubled be the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having only one arg name", "code": "function greet one argument name"}
{"utterance": "returns input in n if n is in input otherwise zero", "code": "return n input if n in input else zero"}
{"utterance": "new function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "when d inside of the string do print string", "code": "if d in string then call print string"}
{"utterance": "when a larger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having name", "code": "function [FUNC] one argument name"}
{"utterance": "let there be a function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is greater than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be the result of calling double using x", "code": "set y to double x"}
{"utterance": "when a larger than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show  file length times file size", "code": "call print file length times file size"}
{"utterance": "if a is greater than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is greater than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "if the string contains d then show string", "code": "if string contains d then call print string"}
{"utterance": "when a bigger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that takes argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a larger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to the result of executing double using x", "code": "set y to double x"}
{"utterance": "if a is more than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string do print string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d just log string", "code": "if string contains d then call print string"}
{"utterance": "if a is above c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show the result of  total of a and b", "code": "call print a plus b"}
{"utterance": "if a is larger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d do show string", "code": "if string contains d then call print string"}
{"utterance": "when a is bigger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "when a is above c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively invoke f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "define a function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than or equal to too", "code": "if n less than or equal two"}
{"utterance": "let product discount equal the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a larger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "make a function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when n smaller than or equal to two", "code": "if n less than or equal two"}
{"utterance": "if a is bigger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "new function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "define variable reversed be s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "give me a function called is palindrome with one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "otherwise return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "take the average of variable one and variable two", "code": "mean variable one and variable two"}
{"utterance": "if a is greater than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  invoking double passing x", "code": "set y to double x"}
{"utterance": "when a is greater than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d just print string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on every element from the array", "code": "map triple array"}
{"utterance": "when a is more than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "make a function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return hi plus name", "code": "return hi plus name"}
{"utterance": "if a is more than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "print  file length times file size", "code": "call print file length times file size"}
{"utterance": "define a function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "new function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "new function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if not just return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is bigger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively call f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively invoke f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when n less than or equal to two", "code": "if n less than or equal two"}
{"utterance": "else just return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that has two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is more than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "append result at the end of the product list", "code": "append result to product list"}
{"utterance": "if a bigger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "take the mean of variable one and variable two", "code": "mean variable one and variable two"}
{"utterance": "when a is bigger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "doubled be  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string then print string", "code": "if d in string then call print string"}
{"utterance": "if a is above c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a bigger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in just one parameter name", "code": "function greet one argument name"}
{"utterance": "new function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "create a function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled be equal to  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is greater than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "return reversed equals s", "code": "return reversed equals s"}
{"utterance": "if a is bigger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d do print string", "code": "if string contains d then call print string"}
{"utterance": "store  executing f using x in y", "code": "set y to f x"}
{"utterance": "if a more than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string just log string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d just print string", "code": "if string contains d then call print string"}
{"utterance": "make a function read from file that has param string filename", "code": "function read from file one argument filename"}
{"utterance": "let there be a function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is larger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than or equal to two", "code": "if n less than or equal two"}
{"utterance": "make a function greet that takes one arg name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be equal to the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  calling double using x", "code": "set y to double x"}
{"utterance": "when a is above c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "when a bigger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "print all lines", "code": "call print all lines"}
{"utterance": "double each thing of the array", "code": "map double array"}
{"utterance": "create a function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  calling double using x", "code": "set y to double x"}
{"utterance": "just return  my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "if a more than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is bigger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "define a function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "give back  the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "if not return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define variable doubled be equal to the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "create a function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "when n is less than or equal to too", "code": "if n less than or equal two"}
{"utterance": "make a function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "when a greater than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable y equal the result of executing double passing x", "code": "set y to double x"}
{"utterance": "when a is greater than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "evaluate print on every part in cities", "code": "for element in city call print city"}
{"utterance": "when n smaller than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is greater than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "for character from the string", "code": "for each char in string"}
{"utterance": "new function fibonacci having a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is larger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a more than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string do print string", "code": "if d in string then call print string"}
{"utterance": "give me a function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "define a function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "return the result of a plus b", "code": "return a plus b"}
{"utterance": "when a is greater than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string then display string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "else recursively execute f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a more than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every element of the array", "code": "map triple array"}
{"utterance": "when a larger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with name", "code": "function [FUNC] one argument name"}
{"utterance": "if a is above c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "if a greater than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable product discount be my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is larger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "else return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be equal to  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise return invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is larger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "if a is above c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci with only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function with two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "define a function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively evaluate f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is larger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a more than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every char of the string", "code": "for each char in string"}
{"utterance": "when a is bigger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively execute f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let doubled be equal to the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every character from the string", "code": "for each char in string"}
{"utterance": "if a bigger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is above c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "let there be a function greet that takes in just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable y be  executing double using x", "code": "set y to double x"}
{"utterance": "when a is more than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is below 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a is above c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d do log string", "code": "if string contains d then call print string"}
{"utterance": "when a more than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled equal the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if true then give back false", "code": "if true then return false"}
{"utterance": "y be equal to the result of calling double passing x", "code": "set y to double x"}
{"utterance": "if n is below or equal to too", "code": "if n less than or equal two"}
{"utterance": "log the result of a and b together", "code": "call print a plus b"}
{"utterance": "if a bigger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let doubled be the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable reversed equal s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "make a function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when the string includes d then display string", "code": "if string contains d then call print string"}
{"utterance": "if a greater than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back hi plus name", "code": "return hi plus name"}
{"utterance": "if a larger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each part from the array", "code": "map double array"}
{"utterance": "if a greater than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount be the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a is more than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "let y be equal to the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a is greater than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d then print string", "code": "if string contains d then call print string"}
{"utterance": "when a is larger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "execute triple on every thing from the array", "code": "map triple array"}
{"utterance": "when a is above c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "store the result of invoking f passing x in y", "code": "set y to f x"}
{"utterance": "if a is greater than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  calling double with x", "code": "set y to double x"}
{"utterance": "find the mean of variable one and variable two", "code": "mean variable one and variable two"}
{"utterance": "new function greet that takes only one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a more than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "execute triple on each thing inside the array", "code": "map triple array"}
{"utterance": "for each character from the string", "code": "for each char in string"}
{"utterance": "if a greater than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "make a new variable y equal the result of invoking double with x", "code": "set y to double x"}
{"utterance": "when a bigger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is above c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "create a function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string just display string", "code": "if d in string then call print string"}
{"utterance": "if a is bigger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function hello world", "code": "function hello world zero arguments"}
{"utterance": "if not give back invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "else just return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is more than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "iterate over every line inside all lines", "code": "for each line in all lines"}
{"utterance": "when a bigger than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has one param name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n is within input else zero", "code": "return n input if n in input else zero"}
{"utterance": "when a is bigger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal  invoking double passing x", "code": "set y to double x"}
{"utterance": "give back the result of my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "when a bigger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return evaluate f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file having parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is above c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if d is within the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return the result of my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "if a more than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return reversed equals s", "code": "return reversed equals s"}
{"utterance": "if a bigger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "when a larger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "let there be a function called is palindrome that takes one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a bigger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let product discount be the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a larger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each char inside the string", "code": "for each char in string"}
{"utterance": "give me a function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "for each char from the string", "code": "for each char in string"}
{"utterance": "when a greater than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for every char in the string", "code": "for each char in string"}
{"utterance": "when a is above c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "display the result of the sum of a and b", "code": "call print a plus b"}
{"utterance": "when a more than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively call f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is larger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function having a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "if a greater than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having one argument name", "code": "function greet one argument name"}
{"utterance": "let there be a function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a bigger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is larger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "for line inside all lines", "code": "for each line in all lines"}
{"utterance": "when a larger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is bigger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string then display string", "code": "if d in string then call print string"}
{"utterance": "when a more than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "create a function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let there be a function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "make a function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "if the string has inside it d do show string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively execute f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "define a function that has a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet having a single param name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display the result of a and b together", "code": "call print a plus b"}
{"utterance": "when a is more than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a more than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is above c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let doubled be  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a more than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "give me a function that takes two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has one argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is above c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively invoke f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each part from the array", "code": "map triple array"}
{"utterance": "if a bigger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is below 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to the result of executing double with x", "code": "set y to double x"}
{"utterance": "if a is more than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having just one param n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled equal  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show hello space name", "code": "call print hello space name"}
{"utterance": "if a is more than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a is bigger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "if n is smaller than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "let doubled be equal to  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is bigger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having just one param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of executing double using x", "code": "set y to double x"}
{"utterance": "if a larger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  executing double passing x", "code": "set y to double x"}
{"utterance": "when a is greater than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print  a and b together", "code": "call print a plus b"}
{"utterance": "when a is larger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes a single argument name", "code": "function greet one argument name"}
{"utterance": "if d in the string then print string", "code": "if d in string then call print string"}
{"utterance": "if a is bigger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string then log string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable y equal  executing double with x", "code": "set y to double x"}
{"utterance": "give me a function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "new function greet that takes only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "create a function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is greater than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every thing of the array", "code": "map triple array"}
{"utterance": "when a is bigger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with one param name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one arg n", "code": "function fibonacci one argument s"}
{"utterance": "evaluate triple on each element inside the array", "code": "map triple array"}
{"utterance": "returns input in n if n inside of input if not zero", "code": "return n input if n in input else zero"}
{"utterance": "if a is bigger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file having arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a bigger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with just one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if d is within the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "when a is bigger than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable y be  calling double with x", "code": "set y to double x"}
{"utterance": "when a more than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let there be a function fibonacci that takes one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a greater than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "execute triple on every part from the array", "code": "map triple array"}
{"utterance": "let product discount be equal to the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "define variable doubled be  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d in the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "evaluate triple on each thing in the array", "code": "map triple array"}
{"utterance": "if a bigger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string do show string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string do print string", "code": "if d in string then call print string"}
{"utterance": "define a function greet that has just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a bigger than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if n less than or equal to too", "code": "if n less than or equal two"}
{"utterance": "doubled equal the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "product discount equal my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a is more than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having one arg n", "code": "function fibonacci one argument s"}
{"utterance": "let doubled be  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return  the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "if a greater than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a is greater than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of invoking double using x", "code": "set y to double x"}
{"utterance": "give me a function read from file that takes in param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled equal the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of invoking double with x", "code": "set y to double x"}
{"utterance": "create a function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when a more than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled be  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes only one arg name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci having only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when d inside of the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "if a is above c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "create a function greet with only one argument name", "code": "function greet one argument name"}
{"utterance": "let y be  invoking double using x", "code": "set y to double x"}
{"utterance": "if a is larger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return n", "code": "return n"}
{"utterance": "if a is larger than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  executing double with x", "code": "set y to double x"}
{"utterance": "double every element in the array", "code": "map double array"}
{"utterance": "if a larger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount be the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a more than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  invoking double with x", "code": "set y to double x"}
{"utterance": "if a is more than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a bigger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "insert result at the front of the product list", "code": "prepend result to product list"}
{"utterance": "when a greater than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having a single arg name", "code": "function greet one argument name"}
{"utterance": "call triple on every thing inside the array", "code": "map triple array"}
{"utterance": "new function that takes two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a larger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with one argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a more than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a is larger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of executing double using x", "code": "set y to double x"}
{"utterance": "return the result of the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "let doubled equal  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to  calling double with x", "code": "set y to double x"}
{"utterance": "when a is above c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "define a function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is bigger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a more than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is larger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is above c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively execute f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "when a is greater than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is more than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of calling double using x", "code": "set y to double x"}
{"utterance": "if a is bigger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively execute f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "execute print on every thing in cities", "code": "for element in city call print city"}
{"utterance": "if a larger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string then display string", "code": "if d in string then call print string"}
{"utterance": "when a is bigger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back  my variable minus their variable", "code": "return my variable minus their variable"}
{"utterance": "if a greater than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has name", "code": "function [FUNC] one argument name"}
{"utterance": "new function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is more than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome having one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print file dot read", "code": "call print file dot read"}
{"utterance": "invoke triple on each element of the array", "code": "map triple array"}
{"utterance": "when a bigger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate print on each part in cities", "code": "for element in city call print city"}
{"utterance": "if a is above c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled be the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "else recursively evaluate f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "double every element inside the array", "code": "map double array"}
{"utterance": "if a larger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "when n less than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "when a is larger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "returns input in n if n is an element of input if not zero", "code": "return n input if n in input else zero"}
{"utterance": "define a function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "else just return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "otherwise recursively execute f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is bigger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "doubled equal the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "call triple on every thing in the array", "code": "map triple array"}
{"utterance": "when a is above c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d then log string", "code": "if string contains d then call print string"}
{"utterance": "let there be a function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me the result of file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "if a is above c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string then print string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let doubled be equal to  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function greet with one param name", "code": "function greet one argument name"}
{"utterance": "create a function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes just one param name", "code": "function greet one argument name"}
{"utterance": "call triple on every part inside the array", "code": "map triple array"}
{"utterance": "if a larger than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled equal  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "define a function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show file dot read", "code": "call print file dot read"}
{"utterance": "when a more than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of calling double using x", "code": "set y to double x"}
{"utterance": "when d is in the string just print string", "code": "if d in string then call print string"}
{"utterance": "if a is above c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "if a larger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "let there be a function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be  executing double with x", "code": "set y to double x"}
{"utterance": "if a more than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n is within input if not zero", "code": "return n input if n in input else zero"}
{"utterance": "when a greater than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "iterate over every character inside the string", "code": "for each char in string"}
{"utterance": "when a is more than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a greater than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store the result of invoking f with x in y", "code": "set y to f x"}
{"utterance": "let there be a function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "let doubled be equal to  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with a single arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "let there be a function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "doubled be  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "y be equal to  executing double passing x", "code": "set y to double x"}
{"utterance": "when a is larger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file with parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is bigger than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each element in the array", "code": "map triple array"}
{"utterance": "if a is greater than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "give me a function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is greater than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store the result of calling f using x in y", "code": "set y to f x"}
{"utterance": "if a is more than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is above c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci that takes in only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "otherwise recursively invoke f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "make a function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "otherwise return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function that takes in a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "y be equal to  invoking double using x", "code": "set y to double x"}
{"utterance": "return   total of a and b", "code": "return a plus b"}
{"utterance": "when the string contains d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is above c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function with name", "code": "function [FUNC] one argument name"}
{"utterance": "make a function having two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "give me a function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes in argument string filename", "code": "function read from file one argument filename"}
{"utterance": "new function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "let y be  calling double passing x", "code": "set y to double x"}
{"utterance": "if a bigger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every element from the array", "code": "map triple array"}
{"utterance": "prepend result at the start of the product list", "code": "prepend result to product list"}
{"utterance": "make a function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if d inside of the string just show string", "code": "if d in string then call print string"}
{"utterance": "returns input in n if n inside of input otherwise zero", "code": "return n input if n in input else zero"}
{"utterance": "when a is greater than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "let there be a function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a bigger than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is above c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having just one arg name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled equal the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is bigger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string then log string", "code": "if d in string then call print string"}
{"utterance": "when n is below or equal to too", "code": "if n less than or equal two"}
{"utterance": "when a is above c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a more than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when n is smaller than or equal to too", "code": "if n less than or equal two"}
{"utterance": "let there be a function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true just just return false", "code": "if true then return false"}
{"utterance": "if a larger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let y be the result of executing double passing x", "code": "set y to double x"}
{"utterance": "else recursively evaluate f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is above c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when true do just return false", "code": "if true then return false"}
{"utterance": "when a greater than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of executing double passing x", "code": "set y to double x"}
{"utterance": "make a new variable doubled be  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively evaluate f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "define a function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "create a function greet with just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate print on everything in cities", "code": "for element in city call print city"}
{"utterance": "when a more than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled equal  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is greater than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively call f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "doubled be  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be equal to  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has one arg name", "code": "function greet one argument name"}
{"utterance": "call triple on every element inside the array", "code": "map triple array"}
{"utterance": "let there be a function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal the result of invoking double using x", "code": "set y to double x"}
{"utterance": "create a function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "make a new variable doubled be equal to  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "let there be a function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a bigger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "new function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a function fibonacci having only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is larger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string then show string", "code": "if d in string then call print string"}
{"utterance": "new function called is palindrome with one param called s", "code": "function is palindrome one argument s"}
{"utterance": "when the string has inside it d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a is more than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than or equal to too", "code": "if n less than or equal two"}
{"utterance": "new function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "make a new variable doubled be equal to the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a larger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is above c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable reversed be equal to s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "evaluate triple on each part of the array", "code": "map triple array"}
{"utterance": "when a more than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is above c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled equal the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has just one param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "for line in all lines", "code": "for each line in all lines"}
{"utterance": "if a is greater than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d do print string", "code": "if string contains d then call print string"}
{"utterance": "make a function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for char in the string", "code": "for each char in string"}
{"utterance": "when a is larger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if n is below 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is above c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively execute f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "product discount be equal to my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a larger than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function having a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string then display string", "code": "if d in string then call print string"}
{"utterance": "if a is larger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "else give back evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a more than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a greater than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a is more than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n in input else zero", "code": "return n input if n in input else zero"}
{"utterance": "when a is bigger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each thing from the array", "code": "map triple array"}
{"utterance": "define a function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d then show string", "code": "if string contains d then call print string"}
{"utterance": "y be the result of invoking double using x", "code": "set y to double x"}
{"utterance": "if a larger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal  invoking double using x", "code": "set y to double x"}
{"utterance": "when a larger than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute print on each element in cities", "code": "for element in city call print city"}
{"utterance": "when a larger than c then evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that has param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is more than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when the string includes d then show string", "code": "if string contains d then call print string"}
{"utterance": "when d in the string do display string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is less than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a larger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with one arg name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let doubled be equal to the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "define variable doubled equal the result of applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  invoking f passing x in y", "code": "set y to f x"}
{"utterance": "if a is larger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function read from file having param string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c do invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in just one argument name", "code": "function greet one argument name"}
{"utterance": "execute print on each thing in cities", "code": "for element in city call print city"}
{"utterance": "when a is greater than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "let there be a function with a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log hello world", "code": "call print hello world"}
{"utterance": "when a greater than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d do show string", "code": "if string contains d then call print string"}
{"utterance": "if a is larger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a is more than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on every part in the array", "code": "map triple array"}
{"utterance": "when a is more than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "if a is above c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is above c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise recursively execute f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a more than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "y be the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "when a bigger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "otherwise give back call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "let there be a function fibonacci having only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when d in the string then show string", "code": "if d in string then call print string"}
{"utterance": "when a is greater than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  executing double passing x", "code": "set y to double x"}
{"utterance": "if a more than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "define variable doubled be  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if the string contains d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a greater than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "else return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "create a function greet that has a single param name", "code": "function greet one argument name"}
{"utterance": "let y equal  calling double with x", "code": "set y to double x"}
{"utterance": "if a is above c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is above c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back  a and b together", "code": "return a plus b"}
{"utterance": "when a bigger than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give back   total of a and b", "code": "return a plus b"}
{"utterance": "make a function having two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a larger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  calling f passing x in y", "code": "set y to f x"}
{"utterance": "when a greater than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let there be a function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is more than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a greater than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal  calling double using x", "code": "set y to double x"}
{"utterance": "if a is larger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function read from file that takes argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c do call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "new function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "give back the result of a plus b", "code": "return a plus b"}
{"utterance": "if a greater than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define a function fibonacci having one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a bigger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "doubled be  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "when a is above c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function fibonacci that has just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when d in the string do log string", "code": "if d in string then call print string"}
{"utterance": "when a larger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet with only one arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function fibonacci that takes one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "when a is more than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than or equal to too", "code": "if n less than or equal two"}
{"utterance": "create a function hello world", "code": "function hello world zero arguments"}
{"utterance": "when a is greater than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a greater than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 do return n", "code": "if n less than 2 then return n"}
{"utterance": "when a more than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 just give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is above c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is above c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string just print string", "code": "if d in string then call print string"}
{"utterance": "when a is bigger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "evaluate triple on every part inside the array", "code": "map triple array"}
{"utterance": "if a is greater than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "for each line inside all lines", "code": "for each line in all lines"}
{"utterance": "create a function that takes two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes in two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a more than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "execute triple on every thing inside the array", "code": "map triple array"}
{"utterance": "when a more than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d just display string", "code": "if string contains d then call print string"}
{"utterance": "when a is larger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d inside of the string just print string", "code": "if d in string then call print string"}
{"utterance": "if a is above c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is below 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a greater than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me the result of file length times file size", "code": "call print file length times file size"}
{"utterance": "when a is above c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is more than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in a single param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "let doubled be  applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show all lines", "code": "call print all lines"}
{"utterance": "create a function fibonacci that takes in only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is an element of the string just show string", "code": "if d in string then call print string"}
{"utterance": "make a function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "else give back evaluate f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "define variable doubled equal the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is above c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is greater than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string just show string", "code": "if d in string then call print string"}
{"utterance": "when a is above c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give back reversed equals s", "code": "return reversed equals s"}
{"utterance": "when a bigger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "make a function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a greater than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function greet that takes in only a single arg name", "code": "function greet one argument name"}
{"utterance": "give me a function with two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a greater than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  invoking double with x", "code": "set y to double x"}
{"utterance": "when a bigger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that takes in one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is more than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci that takes in a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string just log string", "code": "if d in string then call print string"}
{"utterance": "when a is more than c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if d is within the string just log string", "code": "if d in string then call print string"}
{"utterance": "if a is bigger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a is larger than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of invoking double with x", "code": "set y to double x"}
{"utterance": "if a is greater than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a new variable doubled be  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if n is below or equal to two", "code": "if n less than or equal two"}
{"utterance": "if a is more than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of invoking double with x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let there be a function with a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes a single arg name", "code": "function greet one argument name"}
{"utterance": "when a more than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "doubled be equal to  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if not return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is larger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a more than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display file dot read", "code": "call print file dot read"}
{"utterance": "if a bigger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet having a single argument name", "code": "function greet one argument name"}
{"utterance": "define a function greet having only one argument name", "code": "function greet one argument name"}
{"utterance": "let doubled be the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if n is less than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "y be the result of executing double with x", "code": "set y to double x"}
{"utterance": "when a is bigger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is more than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes one argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return fin read every line", "code": "return fin read all lines"}
{"utterance": "when a is more than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "make a function fibonacci with a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c do evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes only a single param name", "code": "function greet one argument name"}
{"utterance": "give me a function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "display  the sum of a and b", "code": "call print a plus b"}
{"utterance": "if a is greater than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "execute triple on every element inside the array", "code": "map triple array"}
{"utterance": "if a more than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "let there be a function greet that takes one param name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet having just one parameter name", "code": "function greet one argument name"}
{"utterance": "when n is smaller than 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "when n is below 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string then show string", "code": "if d in string then call print string"}
{"utterance": "let product discount be equal to my variable minus their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a is above c do call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return the result of  total of a and b", "code": "return a plus b"}
{"utterance": "when a more than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "create a function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "otherwise just return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a more than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a is bigger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on every part in cities", "code": "for element in city call print city"}
{"utterance": "if a bigger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define variable doubled be equal to  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function greet that takes in only one argument name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci that takes in only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "new function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "display all lines", "code": "call print all lines"}
{"utterance": "give me a function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string do print string", "code": "if d in string then call print string"}
{"utterance": "when a larger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "create a function fibonacci that takes in one argument n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in just one arg name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for each character inside the string", "code": "for each char in string"}
{"utterance": "when a larger than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is more than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is bigger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of calling double using x", "code": "set y to double x"}
{"utterance": "if a is larger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "new function read from file with argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if a bigger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function that takes in name", "code": "function [FUNC] one argument name"}
{"utterance": "when a is more than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in one argument name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each part in the array", "code": "map triple array"}
{"utterance": "y equal the result of executing double passing x", "code": "set y to double x"}
{"utterance": "define a function fibonacci that takes in only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "give me a function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "doubled be equal to the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "invoke triple on each thing of the array", "code": "map triple array"}
{"utterance": "if a bigger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c just evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string then show string", "code": "if d in string then call print string"}
{"utterance": "if a is more than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if not give back invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is more than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only a single param name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function called is palindrome that takes in one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "define variable doubled be equal to  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function hello world that", "code": "function hello world zero arguments"}
{"utterance": "when a is greater than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "give me a function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome that takes in one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "when a more than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is more than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function greet having a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a greater than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "let there be a function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes in only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet that takes a single arg name", "code": "function greet one argument name"}
{"utterance": "if n smaller than or equal to two", "code": "if n less than or equal two"}
{"utterance": "when a larger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a greater than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "new function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "define a function greet with only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  calling f with x in y", "code": "set y to f x"}
{"utterance": "if a is bigger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each part in the array", "code": "map double array"}
{"utterance": "let doubled be equal to  applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "if a more than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string just log string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "if the string includes d do print string", "code": "if string contains d then call print string"}
{"utterance": "if a greater than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function read from file that has argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a larger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  executing double using x", "code": "set y to double x"}
{"utterance": "when a is greater than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a is bigger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string do display string", "code": "if d in string then call print string"}
{"utterance": "make a function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "product discount be equal to the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a more than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string do show string", "code": "if d in string then call print string"}
{"utterance": "make a function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c just evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "define variable doubled be  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "new function fibonacci with a single param n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively call f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is larger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "just return the result of a plus b", "code": "return a plus b"}
{"utterance": "if a larger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function called is palindrome that takes in one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "give me a function fibonacci that takes only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in just one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  calling double passing x", "code": "set y to double x"}
{"utterance": "new function that takes a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 just just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a bigger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "just return  a plus b", "code": "return a plus b"}
{"utterance": "when a is more than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if d is in the string then log string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that has parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  executing double with x", "code": "set y to double x"}
{"utterance": "make a function fibonacci that takes in one param n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "let doubled be equal to the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file having argument string filename", "code": "function read from file one argument filename"}
{"utterance": "display  a plus b", "code": "call print a plus b"}
{"utterance": "if a more than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function with a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "y be the result of calling double with x", "code": "set y to double x"}
{"utterance": "when a is bigger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having one arg name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on every part of the array", "code": "map triple array"}
{"utterance": "if a greater than c just execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is larger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "call triple on each part from the array", "code": "map triple array"}
{"utterance": "when a is greater than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function greet that takes a single parameter name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "if d is an element of the string do tell me string", "code": "if d in string then call print string"}
{"utterance": "if a bigger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "define a function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "when a bigger than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d just log string", "code": "if string contains d then call print string"}
{"utterance": "when a bigger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to  executing double passing x", "code": "set y to double x"}
{"utterance": "if a larger than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string then tell me string", "code": "if d in string then call print string"}
{"utterance": "if a is bigger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal the result of invoking double using x", "code": "set y to double x"}
{"utterance": "when a larger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "define a function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "make a function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "show the result of the sum of a and b", "code": "call print a plus b"}
{"utterance": "define a function fibonacci with one argument n", "code": "function fibonacci one argument s"}
{"utterance": "when a is greater than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c just invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that has only one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively execute f passing n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a more than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is within the string just display string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is bigger than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is in the string do show string", "code": "if d in string then call print string"}
{"utterance": "when a larger than c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d just show string", "code": "if string contains d then call print string"}
{"utterance": "when a more than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string do log string", "code": "if d in string then call print string"}
{"utterance": "when a more than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "give me a function fibonacci that has a single param n", "code": "function fibonacci one argument n"}
{"utterance": "else recursively evaluate f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a greater than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "otherwise just return call f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "define variable y be the result of calling double passing x", "code": "set y to double x"}
{"utterance": "let doubled be  applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is above c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not give back execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function called is palindrome with one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "define variable doubled be equal to the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be equal to the result of executing double passing x", "code": "set y to double x"}
{"utterance": "let there be a function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "give me a function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else recursively invoke f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "make a function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount be equal to the difference between my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "if a larger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file that takes argument string filename", "code": "function read from file one argument filename"}
{"utterance": "if d is within the string then show string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a more than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a greater than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a bigger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a more than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has just one arg name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a more than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes just one arg name", "code": "function greet one argument name"}
{"utterance": "if a is larger than c do execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y equal  invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is more than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print the result of file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "when a is more than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a is more than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with a single parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c just invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in one param name", "code": "function greet one argument name"}
{"utterance": "display the result of a plus b", "code": "call print a plus b"}
{"utterance": "when a is greater than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has only a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is greater than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d in the string do print string", "code": "if d in string then call print string"}
{"utterance": "when a more than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c do call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled be the result of applying double to every thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y equal  invoking double using x", "code": "set y to double x"}
{"utterance": "new function hello world that", "code": "function hello world zero arguments"}
{"utterance": "if a more than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return invoke f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "define a function fibonacci that takes in a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to every element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is more than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each part in the array", "code": "map triple array"}
{"utterance": "new function called is palindrome that has one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a greater than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file that takes param string filename", "code": "function read from file one argument filename"}
{"utterance": "double each part inside the array", "code": "map double array"}
{"utterance": "create a function fibonacci that has just one param n", "code": "function fibonacci one argument n"}
{"utterance": "define a function fibonacci having one param n", "code": "function fibonacci one argument s"}
{"utterance": "define variable y equal the result of calling double passing x", "code": "set y to double x"}
{"utterance": "let y equal  executing double with x", "code": "set y to double x"}
{"utterance": "make a function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is less than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "create a function greet having just one argument name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has just one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if n is below 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "make a function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with a single param name", "code": "function greet one argument name"}
{"utterance": "make a new variable doubled be the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet having only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci having a single param n", "code": "function fibonacci one argument n"}
{"utterance": "if not return invoke f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a greater than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "create a function greet with only one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string just display string", "code": "if d in string then call print string"}
{"utterance": "when a is larger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function read from file that takes parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "when a is bigger than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if d is in the string just tell me string", "code": "if d in string then call print string"}
{"utterance": "when a greater than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled be equal to  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function called is palindrome that has one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "y be  executing double with x", "code": "set y to double x"}
{"utterance": "when a is greater than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string includes d do tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a more than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each element inside the array", "code": "map triple array"}
{"utterance": "create a function fibonacci having one arg n", "code": "function fibonacci one argument s"}
{"utterance": "when a greater than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a bigger than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of calling double using x", "code": "set y to double x"}
{"utterance": "if a greater than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return call f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a larger than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "return the result of the sum of a and b", "code": "return a plus b"}
{"utterance": "when a is more than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a more than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is bigger than c then evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each thing in the array", "code": "map double array"}
{"utterance": "if a is larger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled equal  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if not just return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "create a function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "create a function greet that takes in only one arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return invoke f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a bigger than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that has a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "new function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c do evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in a single parameter name", "code": "function greet one argument name"}
{"utterance": "new function with two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "show the result of file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "if d is in the string do display string", "code": "if d in string then call print string"}
{"utterance": "give me a function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "make a function fibonacci that has one param n", "code": "function fibonacci one argument s"}
{"utterance": "new function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if a is more than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes in one arg n", "code": "function fibonacci one argument s"}
{"utterance": "new function fibonacci with one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be  calling double using x", "code": "set y to double x"}
{"utterance": "when a larger than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "new function greet that has a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one argument n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be  applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome having one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d just tell me string", "code": "if string contains d then call print string"}
{"utterance": "when a is more than c do execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci having a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define variable y be  invoking double with x", "code": "set y to double x"}
{"utterance": "double each thing from the array", "code": "map double array"}
{"utterance": "when a is above c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes one param n", "code": "function fibonacci one argument s"}
{"utterance": "when a greater than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that has param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "log all lines", "code": "call print all lines"}
{"utterance": "if a is larger than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c then execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with just one arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "else recursively invoke f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is greater than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is smaller than or equal to two", "code": "if n less than or equal two"}
{"utterance": "define a function read from file that has arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a larger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "insert result to the end of the product list", "code": "append result to product list"}
{"utterance": "if a is bigger than c just call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to the result of invoking double passing x", "code": "set y to double x"}
{"utterance": "if a is larger than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a greater than c then call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string has inside it d then show string", "code": "if string contains d then call print string"}
{"utterance": "let there be a function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a bigger than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string contains d then tell me string", "code": "if string contains d then call print string"}
{"utterance": "if a bigger than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in just one param name", "code": "function greet one argument name"}
{"utterance": "doubled equal  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "tell me  file length multiplied by file size", "code": "call print file length times file size"}
{"utterance": "when a is bigger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n less than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "invoke print on each part in cities", "code": "for element in city call print city"}
{"utterance": "give me a function fibonacci that takes in just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c just call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file that takes argument string filename", "code": "function read from file one argument filename"}
{"utterance": "when a greater than c do invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not return execute f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a larger than c do evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "reversed be equal to s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "when a greater than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not recursively evaluate f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a larger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be the result of invoking double with x", "code": "set y to double x"}
{"utterance": "define a function greet having only a single parameter name", "code": "function greet one argument name"}
{"utterance": "if the string has inside it d just print string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet with a single argument name", "code": "function greet one argument name"}
{"utterance": "when a larger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that has only one argument name", "code": "function greet one argument name"}
{"utterance": "if a is more than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each element of the array", "code": "map triple array"}
{"utterance": "when a greater than c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "define a function that has two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is greater than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a more than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y equal  invoking double using x", "code": "set y to double x"}
{"utterance": "if a is greater than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable product discount equal the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a more than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c just evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c do call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be  executing double passing x", "code": "set y to double x"}
{"utterance": "when a larger than c just execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is above c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes in two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c just invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise give back call f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is larger than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes a single param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a new variable doubled be  applying double to every part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a more than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes in just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a more than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "new function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a larger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "else recursively execute f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if not return invoke f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c just invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes only a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is above c then evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when d in the string just print string", "code": "if d in string then call print string"}
{"utterance": "if a is greater than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a greater than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is bigger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is greater than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "create a function that takes in a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c just evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string includes d do show string", "code": "if string contains d then call print string"}
{"utterance": "define a function called is palindrome that takes one param called s", "code": "function is palindrome one argument s"}
{"utterance": "execute triple on each part of the array", "code": "map triple array"}
{"utterance": "if a bigger than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci with just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is larger than c just evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet that takes in a single arg name", "code": "function greet one argument name"}
{"utterance": "if a is bigger than c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  executing double with x", "code": "set y to double x"}
{"utterance": "when a is larger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal the result of executing double with x", "code": "set y to double x"}
{"utterance": "when a bigger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes just one param n", "code": "function fibonacci one argument n"}
{"utterance": "doubled equal  applying double to every thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "define a function that takes a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is more than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is more than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just invoke f using arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file that takes in arg string filename", "code": "function read from file one argument filename"}
{"utterance": "make a function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "when a is greater than c just invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise return call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a larger than c just invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes name", "code": "function [FUNC] one argument name"}
{"utterance": "when a bigger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c then give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is above c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "when n smaller than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is larger than c just evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "just return  the difference between my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "if not return evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when n less than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "make a function having two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is more than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double every thing in the array", "code": "map double array"}
{"utterance": "if a is more than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on each thing in cities", "code": "for element in city call print city"}
{"utterance": "define a function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "when a is greater than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "when d is in the string do display string", "code": "if d in string then call print string"}
{"utterance": "if a more than c do invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "print hello space name", "code": "call print hello space name"}
{"utterance": "when a is above c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "if a greater than c do execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that has just one param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each element in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "otherwise give back invoke f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "make a new variable y be equal to  executing double with x", "code": "set y to double x"}
{"utterance": "if a is larger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return execute f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "doubled be equal to the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is more than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that takes two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a more than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that has one argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a larger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is larger than c do evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  executing double using x", "code": "set y to double x"}
{"utterance": "if a bigger than c just call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if the string has inside it d just log string", "code": "if string contains d then call print string"}
{"utterance": "if a greater than c then execute f passing params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be equal to  invoking double with x", "code": "set y to double x"}
{"utterance": "let there be a function fibonacci that takes in a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back execute f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "when a greater than c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has one parameter name", "code": "function greet one argument name"}
{"utterance": "when a is above c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y equal  invoking double with x", "code": "set y to double x"}
{"utterance": "if not just return call f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if the string includes d then display string", "code": "if string contains d then call print string"}
{"utterance": "when a larger than c just execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "let there be a function fibonacci having only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function hello", "code": "function hello zero args"}
{"utterance": "if n is smaller than 2 do give back n", "code": "if n less than 2 then return n"}
{"utterance": "if a is above c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just invoke f using args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n is less than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "create a function having two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is larger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable reversed be equal to s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "let there be a function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "when a is bigger than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that has a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "give me a function that takes in a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just evaluate f with parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string do log string", "code": "if d in string then call print string"}
{"utterance": "if a larger than c then give back a if not give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "otherwise give back evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is greater than c just execute f using args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci that has a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then execute f using parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively evaluate f with n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "make a new variable doubled be the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "print the result of the sum of a and b", "code": "call print a plus b"}
{"utterance": "when a is bigger than c then execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n less than or equal to too", "code": "if n less than or equal two"}
{"utterance": "when a more than c do call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that has only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "let there be a function greet that takes in a single argument name", "code": "function greet one argument name"}
{"utterance": "give me a function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "if a more than c just execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function having a pair of arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "give me a function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return invoke f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a bigger than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each thing of the array", "code": "map triple array"}
{"utterance": "when a larger than c do evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two parameters dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "doubled be the result of applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when the string includes d just print string", "code": "if string contains d then call print string"}
{"utterance": "create a function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is above c then invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else just return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is greater than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes one param n", "code": "function fibonacci one argument n"}
{"utterance": "let y be equal to  calling double passing x", "code": "set y to double x"}
{"utterance": "when a is greater than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal  applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c do give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a larger than c do invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome having one arg called s", "code": "function is palindrome one argument s"}
{"utterance": "when a bigger than c do execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function having two args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is larger than c then execute f passing args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "tell me file dot read", "code": "call print file dot read"}
{"utterance": "when a is larger than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is greater than c then execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a bigger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d inside of the string do log string", "code": "if d in string then call print string"}
{"utterance": "give me a function greet that takes one parameter name", "code": "function greet one argument name"}
{"utterance": "when a greater than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount be equal to the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "make a function greet with one argument name", "code": "function greet one argument name"}
{"utterance": "if not give back evaluate f using n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having one param name", "code": "function greet one argument name"}
{"utterance": "if n smaller than 2 then just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is above c just evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "double each element in the array", "code": "map double array"}
{"utterance": "when n is below 2 do just return n", "code": "if n less than 2 then return n"}
{"utterance": "new function greet having only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is above c just call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "when the string has inside it d then display string", "code": "if string contains d then call print string"}
{"utterance": "if the string contains d then log string", "code": "if string contains d then call print string"}
{"utterance": "if a is more than c do invoke f with parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then evaluate f using params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci having just one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c do execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be  applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c then execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "y be equal to the result of invoking double using x", "code": "set y to double x"}
{"utterance": "just return  the difference of my variable and their variable", "code": "return my variable minus their variable"}
{"utterance": "if a bigger than c then execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call triple on each part inside the array", "code": "map triple array"}
{"utterance": "if a is greater than c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled equal  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled equal the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a greater than c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file that takes arg string filename", "code": "function read from file one argument filename"}
{"utterance": "tell me the result of a and b together", "code": "call print a plus b"}
{"utterance": "when a is above c just invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that has just one parameter name", "code": "function greet one argument name"}
{"utterance": "when a larger than c just invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet having one parameter name", "code": "function greet one argument name"}
{"utterance": "if a larger than c just execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci having one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "if a more than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "execute triple on each element from the array", "code": "map triple array"}
{"utterance": "make a new variable doubled be the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function fibonacci having just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if not give back execute f using n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a more than c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on every thing from the array", "code": "map triple array"}
{"utterance": "define a function read from file that takes in parameter string filename", "code": "function read from file one argument filename"}
{"utterance": "define variable y equal the result of executing double with x", "code": "set y to double x"}
{"utterance": "if a bigger than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to the result of applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "doubled be the result of applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on every element of the array", "code": "map triple array"}
{"utterance": "give me a function that takes two args dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is greater than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is within the string just log string", "code": "if d in string then call print string"}
{"utterance": "make a function fibonacci with a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function fibonacci that takes one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c then invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a more than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 then give back n", "code": "if n less than 2 then return n"}
{"utterance": "tell me   total of a and b", "code": "call print a plus b"}
{"utterance": "let there be a function greet with just one argument name", "code": "function greet one argument name"}
{"utterance": "else return execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "when a is above c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci that takes just one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with only one param name", "code": "function greet one argument name"}
{"utterance": "when a greater than c just evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then evaluate f with params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci that takes only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do execute f passing parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable product discount equal the difference of my variable and their variable", "code": "set product discount to my variable minus their variable"}
{"utterance": "when a is more than c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is greater than c just evaluate f passing parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "reversed be s followed by open bracket colon colon negative one close bracket", "code": "reversed equals s open bracket colon colon negative one close bracket"}
{"utterance": "if a is more than c do execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c then invoke f with params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci with only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "store  executing f passing x in y", "code": "set y to f x"}
{"utterance": "when a bigger than c just evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return evaluate f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "define a function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is more than c just just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled be the result of applying double to every thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c then call f passing parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f with arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c then execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "give me a function greet with just one param name", "code": "function greet one argument name"}
{"utterance": "if a larger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just invoke f with args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function with two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "new function greet that takes just one parameter name", "code": "function greet one argument name"}
{"utterance": "define variable doubled equal  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then evaluate f with arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet with only a single param name", "code": "function greet one argument name"}
{"utterance": "if a is greater than c do invoke f passing arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n smaller than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "display hello world", "code": "call print hello world"}
{"utterance": "when a larger than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "find the average of variable one and variable two", "code": "mean variable one and variable two"}
{"utterance": "when a more than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "for char from the string", "code": "for each char in string"}
{"utterance": "if a is above c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be equal to the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a more than c then call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be  invoking double passing x", "code": "set y to double x"}
{"utterance": "define a function called is palindrome that has one param called s", "code": "function is palindrome one argument s"}
{"utterance": "make a new variable doubled be the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is bigger than c then return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal the result of applying double to each part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c do invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to the result of applying double to every thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c do execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled equal  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when the string includes d then print string", "code": "if string contains d then call print string"}
{"utterance": "else recursively execute f using n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is greater than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if true do return false", "code": "if true then return false"}
{"utterance": "create a function fibonacci with only one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is more than c do invoke f passing parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do execute f using arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that takes in only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "y be  calling double with x", "code": "set y to double x"}
{"utterance": "if a larger than c then evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be equal to  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just invoke f passing args a and b otherwise invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has only one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a is bigger than c just call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function greet with only a single argument name", "code": "function greet one argument name"}
{"utterance": "when a is more than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to each part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is above c do evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a greater than c do call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function greet that takes in only one param name", "code": "function greet one argument name"}
{"utterance": "when a more than c then evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let y be the result of executing double using x", "code": "set y to double x"}
{"utterance": "when a is more than c just invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then execute f using params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every part inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let there be a function greet that takes only one param name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci that takes a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a is greater than c just call f using params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do evaluate f with args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n smaller than 2 just return n", "code": "if n less than 2 then return n"}
{"utterance": "when a is above c then evaluate f passing args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then return a otherwise return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if the string contains d then display string", "code": "if string contains d then call print string"}
{"utterance": "when a is greater than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just evaluate f with parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if d is in the string do print string", "code": "if d in string then call print string"}
{"utterance": "if a is larger than c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise recursively call f passing n minus one and n minus too and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a larger than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f with args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "evaluate triple on each thing from the array", "code": "map triple array"}
{"utterance": "when a larger than c then invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "call print on every thing in cities", "code": "for element in city call print city"}
{"utterance": "define variable doubled be equal to  applying double to every element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "new function fibonacci that has one parameter n", "code": "function fibonacci one argument s"}
{"utterance": "when a is greater than c then invoke f using params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just call f with arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "for character inside the string", "code": "for each char in string"}
{"utterance": "if a greater than c just call f with args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c then call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do call f using parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f using params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that has only one param name", "code": "function greet one argument name"}
{"utterance": "if a more than c do call f passing arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function read from file with param string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is more than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a larger than c then invoke f passing params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "iterate over every char in the string", "code": "for each char in string"}
{"utterance": "when a larger than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f using args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable y be equal to  invoking double with x", "code": "set y to double x"}
{"utterance": "give me a function that takes two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "let there be a function fibonacci having one param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is greater than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable doubled be the result of applying double to every part in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is more than c just call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be equal to the result of applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c just invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do execute f with params a and b else execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c just call f passing params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then execute f passing params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if not recursively invoke f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "when a is bigger than c do invoke f with arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c then execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet with one param name", "code": "function greet one argument name"}
{"utterance": "if a is above c just call f using arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "returns input in n if n is an element of input otherwise zero", "code": "return n input if n in input else zero"}
{"utterance": "give me a function that has two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "make a function fibonacci having a single param n", "code": "function fibonacci one argument n"}
{"utterance": "when a is larger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet having one param name", "code": "function greet one argument name"}
{"utterance": "define a function fibonacci that has one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c do evaluate f using args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that takes in one param called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is bigger than c then evaluate f passing parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes two arguments a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a bigger than c do execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c just invoke f passing args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function that has two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "define a function called is palindrome having one argument called s", "code": "function is palindrome one argument s"}
{"utterance": "if a is more than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c just call f passing params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function called is palindrome that has one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "new function greet that takes just one argument name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c do evaluate f passing args a and b if not evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do invoke f with arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c then execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when d is an element of the string do print string", "code": "if d in string then call print string"}
{"utterance": "when a bigger than c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then execute f with arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function read from file with arg string filename", "code": "function read from file one argument filename"}
{"utterance": "if a is larger than c do invoke f passing params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c do evaluate f passing arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke print on every element in cities", "code": "for element in city call print city"}
{"utterance": "if a is bigger than c do call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be  applying double to each element of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a greater than c do invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function fibonacci that has only one parameter n", "code": "function fibonacci one argument n"}
{"utterance": "define variable doubled be  applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "create a function that has a pair of params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "define variable doubled equal  applying double to each thing from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "store the result of calling f with x in y", "code": "set y to f x"}
{"utterance": "when a greater than c just call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function greet that has only a single parameter name", "code": "function greet one argument name"}
{"utterance": "make a function fibonacci that takes only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c then evaluate f passing params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then execute f passing arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c then evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c then execute f with args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f with params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that takes two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "when a is larger than c just call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes one arg n", "code": "function fibonacci one argument n"}
{"utterance": "if a is above c just call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c just execute f with args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci having only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "y be equal to the result of invoking double with x", "code": "set y to double x"}
{"utterance": "when a greater than c do call f passing args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function that has two params a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a is above c do call f using args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f using parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f with arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c do evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is less than or equal to two", "code": "if n less than or equal two"}
{"utterance": "make a function that takes in two arguments dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is bigger than c then call f using arguments a and b otherwise call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes in only one parameter name", "code": "function greet one argument name"}
{"utterance": "doubled be the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c do execute f using arguments a and b if not execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then call f with arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then give back a otherwise give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "make a function fibonacci having only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "else return execute f with n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "doubled equal the result of applying double to each part of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a is larger than c then call f with args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f using parameters a and b else evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define variable y be the result of invoking double with x", "code": "set y to double x"}
{"utterance": "if a is greater than c just evaluate f passing params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "otherwise just return evaluate f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "else recursively call f with n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is more than c do invoke f with arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a function fibonacci that takes in only one param n", "code": "function fibonacci one argument n"}
{"utterance": "if a is greater than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then invoke f with parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "make a new variable doubled be equal to  applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is above c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if not just return call f with n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c then execute f passing arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do call f passing arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do return a else return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is bigger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then evaluate f using arguments a and b otherwise evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a is larger than c do execute f passing parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c do evaluate f using arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else return evaluate f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is bigger than c then invoke f with args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c just call f passing params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f using args a and b else execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that takes just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "else recursively call f using n minus one and n minus two and return the result", "code": "else return call f n minus 1 n minus 2"}
{"utterance": "if a is bigger than c just execute f using parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then invoke f with parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function greet that takes in only a single parameter name", "code": "function greet one argument name"}
{"utterance": "let doubled be  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "give me a function fibonacci that has only one param n", "code": "function fibonacci one argument n"}
{"utterance": "make a function greet with only a single arg name", "code": "function greet one argument name"}
{"utterance": "when a is larger than c do execute f passing arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c just invoke f passing arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c do invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just call f with parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function that takes a pair of args a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "when a greater than c do invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c just execute f using params a and b otherwise execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is bigger than c do execute f using parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do call f using args a and b if not call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using arguments a and b otherwise execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then call f using args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c then call f using arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f using params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function that takes in two parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "create a function fibonacci that takes only one arg n", "code": "function fibonacci one argument n"}
{"utterance": "make a new variable doubled equal the result of applying double to each thing in the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c then call f with parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function fibonacci with only a single arg n", "code": "function fibonacci one argument n"}
{"utterance": "when a bigger than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c just evaluate f using arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c just call f with parameters a and b if not call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a greater than c just evaluate f using params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a bigger than c then evaluate f with arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c then execute f passing parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function having name", "code": "function [FUNC] one argument name"}
{"utterance": "if a greater than c then call f using params a and b otherwise call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just just return a if not just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c just call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is greater than c then evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f using params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just execute f with parameters a and b else execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c just evaluate f using args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then invoke f using arguments a and b else invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c do call f passing parameters a and b else call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if n is smaller than or equal to two", "code": "if n less than or equal two"}
{"utterance": "define variable doubled equal the result of applying double to each element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "let doubled be equal to the result of applying double to each thing inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a is bigger than c do evaluate f passing args a and b else evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c do evaluate f passing arguments a and b if not evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a larger than c then evaluate f with parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do evaluate f passing params a and b otherwise evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is greater than c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled equal  applying double to each element inside the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a larger than c do call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a larger than c then invoke f with params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is larger than c just evaluate f using parameters a and b otherwise evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using parameters a and b otherwise invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then invoke f passing args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c just invoke f using parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a more than c then call f passing arguments a and b if not call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when n smaller than 2 then return n", "code": "if n less than 2 then return n"}
{"utterance": "make a function fibonacci that takes in just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "give me a function with two params dictionary n and string input", "code": "function [FUNC] two arguments n input"}
{"utterance": "if a is bigger than c do evaluate f with args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function fibonacci that takes a single parameter n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c just execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "doubled be the result of applying double to each thing of the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a bigger than c then execute f with arguments a and b else execute f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a more than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just return a if not return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c do call f with params a and b else call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c just invoke f using args a and b else invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "invoke triple on each part inside the array", "code": "map triple array"}
{"utterance": "if a is above c then call f with arguments a and b else call f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do execute f with args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c then call f with args a and b else call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function called is palindrome that takes one parameter called s", "code": "function is palindrome one argument s"}
{"utterance": "define a function greet having only one param name", "code": "function greet one argument name"}
{"utterance": "if a is above c do evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "define a function that has a pair of parameters a and b", "code": "function [FUNC] two arguments a and b"}
{"utterance": "if a greater than c do call f with params a and b if not call f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "else give back execute f passing n minus one and n minus two", "code": "else return f n minus one n minus two"}
{"utterance": "if a is above c do execute f passing params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function fibonacci that has a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "else give back call f passing n minus one and n minus too", "code": "else return f n minus one n minus two"}
{"utterance": "log the result of file length times file size", "code": "call print file length times file size"}
{"utterance": "when a larger than c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c do invoke f using params a and b else invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a greater than c just invoke f using arguments a and b if not invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c do invoke f passing parameters a and b if not invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c then execute f with parameters a and b otherwise execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just invoke f with args a and b if not invoke f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is above c do give back a else give back c", "code": "if a greater than c then return a else return c"}
{"utterance": "when a bigger than c then invoke f passing params a and b if not invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is bigger than c just execute f passing args a and b otherwise execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "new function with name", "code": "function [FUNC] one argument name"}
{"utterance": "let doubled be equal to  applying double to each part from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "when a more than c just invoke f with params a and b otherwise invoke f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is above c just evaluate f passing arguments a and b else evaluate f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "create a function greet that takes in one arg name", "code": "function greet one argument name"}
{"utterance": "if a bigger than c then evaluate f passing parameters a and b if not evaluate f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let there be a function greet that takes only a single parameter name", "code": "function greet one argument name"}
{"utterance": "let there be a function fibonacci that takes a single argument n", "code": "function fibonacci one argument n"}
{"utterance": "if a is bigger than c do execute f with parameters a and b if not execute f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is larger than c do call f passing args a and b otherwise call f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when the string contains d then print string", "code": "if string contains d then call print string"}
{"utterance": "if a more than c just just return a else just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is larger than c do execute f passing args a and b if not execute f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then invoke f passing arguments a and b otherwise invoke f with arguments b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "give me a function fibonacci with just one argument n", "code": "function fibonacci one argument n"}
{"utterance": "when a more than c do evaluate f with params a and b if not evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "let doubled be  applying double to every element from the list", "code": "let doubled equal double element for each element in the list"}
{"utterance": "if a bigger than c just evaluate f using args a and b otherwise evaluate f with args b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a bigger than c do call f using parameters a and b otherwise call f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c then just return a otherwise just return c", "code": "if a greater than c then return a else return c"}
{"utterance": "if a is above c then invoke f passing parameters a and b else invoke f with parameters b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "when a is more than c do execute f using params a and b if not execute f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
{"utterance": "if a is more than c then evaluate f with params a and b else evaluate f with params b and c", "code": "if a greater than c then call f a b else call f b c"}
